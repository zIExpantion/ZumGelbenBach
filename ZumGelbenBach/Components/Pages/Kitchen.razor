@page "/kitchen"
@rendermode InteractiveServer
@using ZumGelbenBach;
@using ZumGelbenBach.Components.Models
@inject SessionDataService sdS


<PageTitle>Küchenansicht</PageTitle>
<div style="display: flex; align-items: center; justify-content: space-between; padding: 10px 0;" class="menu-item">
    <div style="margin:0 auto;width:auto; flex-grow: 1; flex-direction: column; order: 2; padding-left: 15px; padding-right: 30px;">
        <h3>kitchen</h3>
    </div>
    <div style="float:right; overflow: hidden; order: 3;">
        <label for="contentSelector">Ansicht:</label>
        <select name="contentSelector" id="contentSelector" @bind="SelectedOption">
            <option value="normal">Normal</option>
            <option value="byProduct">bei Produkt</option>
            <option value="byTable">bei Tisch</option>
        </select>
    </div>
</div>

<br />


<div>
    @if (SelectedOption == "normal")
    {
        @foreach (var item in orderItems)
        {
            var itemId = item["ID"].ToString();
            <div style="display: flex; align-items: center; justify-content: space-between; padding: 10px 0;" class="menu-item">
                <div style="margin:0 auto;width:auto; flex-grow: 1; flex-direction: column; order: 2; padding-left: 50px; padding-right: 30px;">
                    <h5 style="margin: 0; font-size: 1rem; font-weight: normal;">@item["Bezeichnung"].ToString()</h5>

                </div>
                <div style="float:right; overflow: hidden; order: 3;">
                    <button class="btn btn-danger" @onclick="() => accomplishOrder(item)" style="">Erledigt</button>
                </div>
            </div>

            <div>
                <table style="width:100%;">
                    <tr style="border:inset; border-collapse:collapse;">
                        <td style="border:inset; border-collapse:collapse; vertical-align: top;">
                            <p style="padding-left:15px; margin: 5px 0 0; font-size: 0.85rem; color: #555;">Anzahl: @item["Amount"].ToString()</p>
                        </td>
                        <td style="border:inset; border-collapse:collapse;">
                            <p style="padding-left:15px; margin: 5px 0 0; font-size: 0.85rem; color: #555;">Zusatzinfo: @item["AdditionalInfo"].ToString()</p>
                        </td>
                        <td style="border:inset; border-collapse:collapse;">
                            <p style="padding-left:15px; margin: 5px 0 0; font-size: 0.85rem; color: #555;">Tischnummer: @item["TableID"].ToString()</p>
                        </td>
                    </tr>
                </table>
            </div>

            <hr style="margin: 5px 0; border: none; border-bottom: 1px solid #ddd;" />
        }
    }

    @if (SelectedOption == "byProduct")
    {

    }

    @if (SelectedOption == "byTable")
    {

    }
</div>









@code {
    private Dictionary<string, OrderItemState> orderItemstates = new Dictionary<string, OrderItemState>();
    private List<Dictionary<string, object>> orderItems = new List<Dictionary<string, object>>();
    private DBConnector dB = new(); // Globale Instanz von DBConnector
    private string SelectedOption { get; set; } = "normal"; // Default value

    protected override async Task OnInitializedAsync()
    {
        await GetDataAsync();
    }


    private async Task GetDataAsync()
    {
        try {
            var reader = dB.ReadOrders("Orders", new[] { "OrderID", "TableNumber", "Product", "AdditionalInfo", "Amount", "ProductName" , "Erledigt"});
            orderItems.Clear();

            while (reader.Read())
            {
                var row = new Dictionary<string, object> {
                    { "ID", reader["OrderID"] },
                    { "TableID", reader["TableNumber"] },
                    { "Product", reader["Product"] },
                    { "AdditionalInfo", reader["AdditionalInfo"] },
                    { "Amount", reader["Amount"] },
                    { "Bezeichnung", reader["ProductName"]},
                    { "Erledigt", reader["Erledigt"]}
                };
                orderItems.Add(row);

                var itemId = row["ID"].ToString();
                int.TryParse(row["Amount"].ToString(), out var intAmount);
                orderItemstates[itemId] = new OrderItemState {
                        amount = intAmount,
                        sProdukt = row["Product"].ToString(),
                        OrderID = row["ID"].ToString(),
                        additionalInfo = row["AdditionalInfo"].ToString(),
                        tableID = row["TableID"].ToString(),
                        ProductName = row["Bezeichnung"].ToString(),
                        erledigt = row["Erledigt"].ToString()
                };
            }
        }
        catch (Exception ex) {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task accomplishOrder(Dictionary<String, object> item)
    {
        try {            
            String id = item["ID"].ToString();  
            orderItems.Remove(item);
            StateHasChanged(); //aktualisiert die UI
        }
        catch (Exception ex) {
            Console.WriteLine($"Error removing item: {ex.Message}");
        }
    }

   
    

}
