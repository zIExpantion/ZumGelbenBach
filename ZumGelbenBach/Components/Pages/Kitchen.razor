@page "/kitchen"
@rendermode InteractiveServer
@using ZumGelbenBach;
@using ZumGelbenBach.Components.Models
@inject SessionDataService sdS


<PageTitle>Küchenansicht</PageTitle>

<h3>kitchen</h3>
<br />


<div>
    @foreach (var item in orderItems)
    {
        var itemId = item["ID"].ToString();
        <div style="display: flex; align-items: center; justify-content: space-between; padding: 10px 0;" id="@itemId" class="menu-item">
            <div style="flex-grow: 1; padding-left: 10px;">
                <h5 style="margin: 0; font-size: 1rem; font-weight: normal;">@item["ProductName"].ToString()</h5>
                <p style="margin: 5px 0 0; font-size: 0.85rem; color: #555;">Anzahl: @item["Amount"].ToString()</p>
                <p style="margin: 5px 0 0; font-size: 0.85rem; color: #555;">Zusatzinfo: @item["AdditionalInfo"].ToString()</p>
                <p style="margin: 5px 0 0; font-size: 0.85rem; color: #555;">Tischnummer: @item["TableID"].ToString()</p>
            </div>
        </div>
        <hr style="margin: 5px 0; border: none; border-bottom: 1px solid #ddd;" />

    }
</div>


@code {
    private Dictionary<string, OrderItemState> orderItemstates = new Dictionary<string, OrderItemState>();
    private List<Dictionary<string, object>> orderItems = new List<Dictionary<string, object>>();


    protected override async Task OnInitializedAsync()
    {
        await GetDataAsync();

    }


    private async Task GetDataAsync()
    {
        try
        {
            DBConnector dB = new DBConnector();
            var reader = dB.ReadOrders("Orders", new[] { "OrderID", "TableNumber", "Product", "AdditionalInfo", "Amount", "ProductName" });

            orderItems.Clear();

            while (reader.Read())
            {

                var row = new Dictionary<string, object>
                {
                    { "ID", reader["OrderID"] },
                    { "TableID", reader["TableNumber"] },
                    { "Product", reader["Product"] },
                    { "AdditionalInfo", reader["AdditionalInfo"] },
                    { "Amount", reader["Amount"] },
                    { "Bezeichnung", reader["ProductName"]}
                };
                orderItems.Add(row);

                var itemId = row["ID"].ToString();
                int.TryParse(row["Amount"].ToString(), out var intAmount);
                orderItemstates[itemId] = new OrderItemState
                    {
                        amount = intAmount,
                        sProdukt = row["Product"].ToString(),
                        OrderID = row["ID"].ToString(),
                        additionalInfo = row["AdditionalInfo"].ToString(),
                        tableID = row["TableID"].ToString(),
                        ProductName = row["ProductName"].ToString()
                    };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

}
