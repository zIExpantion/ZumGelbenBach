@page "/kitchen"
@rendermode InteractiveServer
@using ZumGelbenBach;
@using ZumGelbenBach.Components.Models
@inject SessionDataService sdS
@inject NavigationManager manager
@inject Authentifications auth


<PageTitle>Küchenansicht</PageTitle>

<style>

    html, body {
        overflow-y: scroll; /* Always show vertical scrollbar */
    }

    .headline {
        font-family: 'Edwardian Script ITC';
        font-size: 500%;
        text-align: center;
        margin-bottom: 100px;
    }

    .divright{
    float: right;
    overflow: hidden;
    order: 3;
    }

    .divleft{
    margin: 0 auto;
    width: auto;
    flex-grow: 1;
    flex-direction: column;
    order: 2;
    padding-left: 15px;
    padding-right: 30px;
    }

    .divbox{
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px 0;
    }

    .pitem{
    padding-left: 15px;
    margin: 5px 0 0;
    font-size: 0.85rem;
    color: #555;
    }

    td{
    border: inset;
    border-collapse: collapse;
    }

    h5{
    margin: 0;
    font-size: 1rem;
    font-weight: bold;
    margin-left: 0.5em;
    }

    .btnDone
    {
    font-size: 1em;
    height: 1.8em;
    padding: 0em;
    padding-top: 0em;


    }

    #contentSelector {
    padding: 0.5em 1em;
    font-size: 1em;
    color: #333;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #f9f9f9;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);
    }

    #contentSelector:hover {
    background-color: #eaeaea;
    border-color: #bbb;
    }

    #contentSelector:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0px 0px 5px rgba(0, 123, 255, 0.5);
    }

    table {
    width: 100%;
    border-collapse: collapse; /* Ensure borders are merged correctly */
    table-layout: fixed; /* Enforce equal column widths */
    }

    tr {
    border-bottom: 1px solid #ddd; /* Add a bottom border to rows */
    }

    td {
    border: 1px solid #ccc; /* Ensure every cell has borders */
    padding: 8px;
    text-align: left;
    vertical-align: top;
    }

    td:nth-child(1),
    td:nth-child(2),
    td:nth-child(3) {
    width: 33%; /* Distribute columns evenly */
    }

</style>

<!-- HEADER -->
<div class="menu-item divbox">
    <div class="divleft">
        <h1 class="headline"> Kitchen </h1>
    </div>
    <div class="divright">
        <label for="contentSelector">Ansicht:</label>
        <select name="contentSelector" id="contentSelector" @bind="SelectedOption">
            <option value="normal">Normal</option>
            <option value="byProduct">bei Produkt</option>
            <option value="byTable">bei Tisch</option>
        </select>
    </div>
</div>

<br />

<!-- SubArea -->
<div>
    @if (SelectedOption == "normal")
    {
        @foreach (var item in orderItems)
        {
            var itemId = item["ID"].ToString();
            <div>
                <div class="menu-item divbox">
                    <div class="divleft">
                        <h5>@item["Bezeichnung"].ToString()</h5>

                    </div>
                    <div class="divright">
                        <button class="btn btn-danger btnDone" @onclick="() => accomplishOrder(item)">Erledigt</button>
                    </div>
                </div>

                <div>
                    <table style="width:100%;">
                        <tr style="border:inset; border-collapse:collapse;">
                            <td style="border:inset; border-collapse:collapse; vertical-align: top;">
                                <p class="pitem">Anzahl: @item["Amount"].ToString()</p>
                            </td>
                            <td style="border:inset; border-collapse:collapse; vertical-align: top;">
                                <p class="pitem">Zusatzinfo: @item["AdditionalInfo"].ToString()</p>
                            </td>
                            <td>
                                <p class="pitem">Tischnummer: @item["TableID"].ToString()</p>
                            </td>
                        </tr>
                    </table>
                </div>

                <hr style="margin: 0px 10; margin-bottom: 0px; border: none; border-bottom: 1px solid #ddd;" />
            </div>
        }
    }

    @if (SelectedOption == "byProduct")
    {
        @foreach(var item in Products)
        {
            <div class="menu-item divbox">
                <div class="divleft">
                    <p> @item.Key.ToString() </p>
                </div>
                <div class="divright">
                    <p> @item.Value.ToString() </p>
                </div>
            </div>
            <hr style="margin: 5px 0; border: none; border-bottom: 1px solid #ddd;" />
        }
    }

    @if (SelectedOption == "byTable")
    {
        @foreach(var table in tables)
        {
            <h3>@table.Key</h3>
            <div class="menu-item divbox">
                <div class="divleft">
                    <p><b>Product</b></p>
                </div>
                <div class="divright">
                    <p><b>Anzahl</b></p>
                </div>
            </div>

            @foreach(var item in table.Value)
            {

                <div class="menu-item divbox">
                    <div class="divleft">
                        <p>@item["Bezeichnung"]</p>

                    </div>
                    <div class="divright">
                        <p>@item["Amount"]</p>

                    </div>

                </div>

                // @foreach (var kvp in item)
                // {
                //     <p>@kvp.Key: @kvp.Value</p>
            // }
            }
            <hr />
        }
    }
</div>





@code {

    //normal
    private Dictionary<string, OrderItemState> orderItemstates = new Dictionary<string, OrderItemState>();
    private List<Dictionary<string, object>> orderItems = new List<Dictionary<string, object>>();
    //byProduct
    private Dictionary<string, int> Products = new Dictionary<string, int>();
    private SortedDictionary<int, List<Dictionary<string, object>>> tables = new SortedDictionary<int, List<Dictionary<string, object>>>();


    private DBConnector dB = new(); // Globale Instanz von DBConnector
    private string _selectedOption = "normal"; // Default value
    private string SelectedOption
    {
        get => _selectedOption;
        set
        {
            if (_selectedOption != value)
            {
                _selectedOption = value;
                OnSelectedOptionChanged();
            }
        }
    }


    private void OnSelectedOptionChanged()
    {
        StateHasChanged(); //aktualisiert die UI
        GetDataByProduct();
        GetDataByTable();
    }












    protected override async Task OnInitializedAsync()
    {
        //Authorize
        if (auth.login)
        {
            await GetDataAsync();
            await GetDataByProduct();
            await GetDataByTable();
        }
        else{
            manager.NavigateTo("/login");
        }


    }


    private async Task GetDataAsync()
    {
        try {
            var reader = dB.ReadOrders("Orders", new[] { "OrderID", "TableNumber", "Product", "AdditionalInfo", "Amount", "ProductName" , "Erledigt"});
            orderItems.Clear();

            while (reader.Read())
            {
                var row = new Dictionary<string, object> {
                    { "ID", reader["OrderID"] },
                    { "TableID", reader["TableNumber"] },
                    { "Product", reader["Product"] },
                    { "AdditionalInfo", reader["AdditionalInfo"] },
                    { "Amount", reader["Amount"] },
                    { "Bezeichnung", reader["ProductName"]},
                    { "Erledigt", reader["Erledigt"]}
                };
                orderItems.Add(row);

                var itemId = row["ID"].ToString();
                int.TryParse(row["Amount"].ToString(), out var intAmount);
                orderItemstates[itemId] = new OrderItemState {
                        amount = intAmount,
                        sProdukt = row["Product"].ToString(),
                        OrderID = row["ID"].ToString(),
                        additionalInfo = row["AdditionalInfo"].ToString(),
                        tableID = row["TableID"].ToString(),
                        ProductName = row["Bezeichnung"].ToString(),
                        erledigt = row["Erledigt"].ToString()
                };
            }
        }
        catch (Exception ex) {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task accomplishOrder(Dictionary<String, object> item)
    {
        try {            
            String id = item["ID"].ToString();  
            orderItems.Remove(item);
            dB.updateOrderStatus(id);
            StateHasChanged(); //aktualisiert die UI
            GetDataByProduct();
            GetDataByTable();
        }
        catch (Exception ex) {
            Console.WriteLine($"Error removing item: {ex.Message}");
        }
    }

    private async Task GetDataByProduct()
    {
        try{

            Products.Clear();

            foreach (var v in orderItems)
            {

                if (!Products.Keys.Contains(v["Bezeichnung"]))
                {
                    Products.Add(v["Bezeichnung"].ToString(), 1);
                }
                else{
                    Products[v["Bezeichnung"].ToString()] = Products[v["Bezeichnung"].ToString()] + 1;
                }
            }
        }
        catch (Exception ex) {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }

    }

    private async Task GetDataByTable()
    {
        try
        {
            // Clear existing data to avoid duplication
            tables.Clear();

            foreach (var v in orderItems)
            {
                int vkey = int.Parse(v["TableID"].ToString());

                // Check if the table ID already exists in the dictionary
                if (!tables.ContainsKey(vkey))
                {
                    // If not, add a new entry with the current item
                    tables.Add(vkey, new List<Dictionary<string, object>> { v });
                }
                else
                {
                    // If the table already exists, check if the item (by "Bezeichnung") is already in the list
                    var existingItem = tables[vkey].FirstOrDefault(item =>
                        item["Bezeichnung"].ToString() == v["Bezeichnung"].ToString());

                    if (existingItem != null)
                    {
                        // If the item exists, increment its "Amount" value
                        int currentAmount = int.Parse(existingItem["Amount"].ToString());
                        int newAmount = currentAmount + int.Parse(v["Amount"].ToString());
                        existingItem["Amount"] = newAmount; // Update the value in the dictionary
                    }
                    else
                    {
                        // If the item does not exist, add it to the list
                        tables[vkey].Add(v);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }

    }
}
