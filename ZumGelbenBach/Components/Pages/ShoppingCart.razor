@page "/warenkorb"
@using ZumGelbenBach.Components.Models
@inject SessionDataService sdS
@inject NavigationManager manager

<h3>Warenkorb</h3>

@if (menuItemStates == null || !menuItemStates.Any(x => x.Value.IsSelected))
{
    <p>Ihr Warenkorb ist leer.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Produkt</th>
                <th>Beschreibung</th>
                <th>Anzahl</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in menuItemStates.Where(x => x.Value.IsSelected))
            {
                <tr>
                    <td>@item.Key</td>
                    <td>
                        <input type="text"
                        value="@item.Value.sProdukt"
                        @oninput="e => OnDescriptionChange(item.Key, e.Value)" />
                    </td>
                    <td>
                        <input type="number"
                        min="1"
                        value="@item.Value.Quantity"
                        @oninput="e => OnQuantityChange(item.Key, e.Value)" />
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveFromCart(item.Key)">Entfernen</button>                        
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <p><strong>Gesamtsumme der Artikel: </strong>@totalQuantity</p>
}

@code {
    private Dictionary<string, MenuItemState> menuItemStates = new Dictionary<string, MenuItemState>();
    private int totalQuantity = 0;

    protected override void OnInitialized()
    {
        // Zustände aus der Session abrufen
        menuItemStates = sdS.GetMenuItemStates();

        // Setze sicherheitshalber alle nicht vorhandenen Items auf einen Standardzustand
        foreach (var key in menuItemStates.Keys)
        {
            if (!menuItemStates[key].IsSelected)
            {
                menuItemStates[key] = new MenuItemState
                    {
                        Quantity = 0,
                        IsSelected = false,
                        sProdukt = ""
                    };
            }
        }

        UpdateTotalQuantity(); // Gesamtsumme berechnen
    }

    private void OnQuantityChange(string itemId, object value)
    {
        int quantity = int.TryParse(value.ToString(), out var result) ? result : 1;

        // Aktualisiere die Menge im lokalen Zustand
        if (menuItemStates.ContainsKey(itemId))
        {
            menuItemStates[itemId].Quantity = quantity;
            // Speichere die Änderungen in der Session
            sdS.AddOrUpdateMenuItem(itemId, quantity, menuItemStates[itemId].sProdukt);
        }
        UpdateTotalQuantity(); // Gesamtsumme aktualisieren
        StateHasChanged();
    }

    private void OnDescriptionChange(string itemId, object value)
    {
        sdS.AddOrUpdateMenuItem(itemId, menuItemStates[itemId].Quantity, value?.ToString()); // Beschreibung aktualisieren
        StateHasChanged();
    }

    private void RemoveFromCart(string itemId)
    {        
        sdS.RemoveItem(itemId);  // Artikel aus der Session entfernen
        menuItemStates = sdS.GetMenuItemStates();      

        UpdateTotalQuantity(); // Gesamtsumme aktualisieren
        StateHasChanged();
    }

    private void UpdateTotalQuantity()
    {
        totalQuantity = menuItemStates.Values
            .Where(x => x.IsSelected)
            .Sum(item => item.Quantity);
    }
   
}
