@page "/warenkorb"
@rendermode InteractiveServer
@using ZumGelbenBach;
@using ZumGelbenBach.Components.Models
@inject SessionDataService sdS
@inject NavigationManager manager

<h1 class="headline"> Warenkorb </h1>

<style>

    .headline {
        font-family: 'Edwardian Script ITC';
        font-size: 500%;
        text-align: center;
        margin-bottom: 100px;
    }


</style>



@if (menuItemStates == null || !menuItemStates.Any(x => x.Value.IsSelected))
{
    <p>Ihr Warenkorb ist leer.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Produkt</th>
                <th>Beschreibung</th>
                <th>Anzahl</th>
                <th>Preis</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in menuItemStates.Where(x => x.Value.IsSelected))
            {
                <tr>
                    <td>@item.Key</td>
                    <td>
                        <input type="text"
                               value="@item.Value.sProdukt"
                               @oninput="async e => await OnDescriptionChange(item.Value.dbID, item.Key, e.Value)" />
                    </td>
                    <td>
                        <input type="number"
                               min="1"
                               max="100"
                               value="@item.Value.Quantity"
                               @oninput="async e => await OnQuantityChange(item.Value.dbID, item.Key, e.Value)" />
                    </td>
                    <td>@GetPrice(item.Key)</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveFromCart(item.Key)">Entfernen</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <p><strong>Gesamtsumme der Artikel: </strong>@totalQuantity</p>
    <p><strong>Gesamtsumme der Kosten: </strong>@totalPrice</p>
    <p>Tischnummer (1-16): <input type="number" @oninput="e => TablenumberValidation(e.Value)" id="tableID" @bind="tableID" /></p>
    <button class="btn btn-danger" @onclick="async () => await BestellungSenden()">Bestellung abschließen</button>
}

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; }

    private DBConnector dB = new(); // Globale Instanz von DBConnector
    private Dictionary<string, MenuItemState> menuItemStates = new();
    private Dictionary<string, decimal> priceCache = new(); // Cache für Preise
    private int totalQuantity;
    private string totalPrice { get; set; }
    private int? tableID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        menuItemStates = sdS.GetMenuItemStates();
        await LoadPricesAsync();
        UpdateTotals();
    }

    private async Task LoadPricesAsync()
    {
        var dbIDs = menuItemStates.Values.Select(x => x.dbID).Distinct();
        foreach (var dbID in dbIDs)
        {
            var reader = await dB.GetTotalPriceAsync(dbID);
            if (reader.Read())
            {
                decimal.TryParse(reader["Preis"].ToString(), out var price);
                priceCache[dbID] = price;
            }
        }
    }

    private async Task OnQuantityChange(string dbID, string itemId, object value)
    {
        if (!int.TryParse(value.ToString(), out var quantity)) quantity = 1;

        if (menuItemStates.ContainsKey(itemId))
        {
            menuItemStates[itemId].Quantity = quantity;
            sdS.AddOrUpdateMenuItem(dbID, itemId, quantity, menuItemStates[itemId].sProdukt, menuItemStates[itemId].sProduktName);
        }
        UpdateTotals();
    }

    private async Task OnDescriptionChange(string dbID, string itemId, object value)
    {
        if (menuItemStates.ContainsKey(itemId))
        {
            menuItemStates[itemId].sProdukt = value?.ToString();
            sdS.AddOrUpdateMenuItem(dbID, itemId, menuItemStates[itemId].Quantity, menuItemStates[itemId].sProdukt, menuItemStates[itemId].sProduktName);
        }
    }

    private void RemoveFromCart(string itemId)
    {
        sdS.RemoveItem(itemId);
        menuItemStates.Remove(itemId);
        UpdateTotals();
    }

    private void UpdateTotals()
    {
        totalQuantity = menuItemStates.Values.Where(x => x.IsSelected).Sum(x => x.Quantity);
        totalPrice = menuItemStates.Values
            .Where(x => x.IsSelected)
            .Sum(x => priceCache.ContainsKey(x.dbID) ? priceCache[x.dbID] * x.Quantity : 0)
            .ToString("F2") + "€";
    }

    private string GetPrice(string itemId)
    {
        var item = menuItemStates[itemId];
        if (priceCache.TryGetValue(item.dbID, out var price))
        {
            return (price * item.Quantity).ToString("F2") + "€";
        }
        return "0.00€";
    }

    private async Task BestellungSenden()
    {
        try
        {
            var tasks = new List<Task>();

            foreach (var item in menuItemStates.Values.Where(x => x.IsSelected))
            {
                var values = new List<string>
            {
                tableID.ToString(),
                item.dbID.ToString(),
                item.sProdukt,
                item.Quantity.ToString(),
                item.sProduktName
            };

                // Add each SaveDataAsync call to the task list
                tasks.Add(dB.SaveDataAsync("Orders",
                                            new[] { "TableNumber", "Product", "AdditionalInfo", "Amount", "ProductName" },
                                            values,
                                            new List<int> { 1, 2, 1, 2, 1 }));
            }

            // Wait for all the tasks to complete in parallel
            await Task.WhenAll(tasks);

            await JSRuntime.InvokeVoidAsync("confirm", "Bestellung abgesendet");
            ClearFields();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void ClearFields()
    {
        menuItemStates.Clear();
        totalQuantity = 0;
        totalPrice = "0.00€";
        StateHasChanged();
    }

    private void TablenumberValidation(object e)
    {
        if (int.TryParse(e.ToString(), out var result) && result >= 1 && result <= 16)
        {
            tableID = result;
        }
        else
        {
            tableID = null;
        }
    }
}
