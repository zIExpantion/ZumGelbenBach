@page "/warenkorb"
@rendermode InteractiveServer
@using ZumGelbenBach;
@using ZumGelbenBach.Components.Models
@inject SessionDataService sdS
@inject NavigationManager manager

<h3>Warenkorb</h3>

@if (menuItemStates == null || !menuItemStates.Any(x => x.Value.IsSelected))
{
    <p>Ihr Warenkorb ist leer.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Produkt</th>
                <th>Beschreibung</th>
                <th>Anzahl</th>
                <th>Preis</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in menuItemStates.Where(x => x.Value.IsSelected))
            {
                <tr>
                    <td>@item.Key</td>
                    <td>
                        <input type="text"
                        value="@item.Value.sProdukt"
                        @oninput="e => OnDescriptionChange(item.Value.dbID, item.Key, e.Value)" />
                    </td>
                    <td>
                        <input type="number"
                        min="1"
                        value="@item.Value.Quantity"
                        @oninput="e => OnQuantityChange(item.Value.dbID, item.Key, e.Value)" />
                    </td>
                    <td>@getPrice(item.Value.dbID, item.Value.Quantity)</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveFromCart(item.Key)">Entfernen</button>                        
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <p><strong>Gesamtsumme der Artikel: </strong>@totalQuantity</p>
    <p><strong>Gesamtsumme der Kosten: </strong>@totalPrice</p>
    <p>Tischnummer (1-16): <input type="number" @oninput="e => tablenumberValidation(e.Value)" id="tableID" @bind="tableID"/></p>
    <button class="btn btn-danger" @onclick="() => BestellungSenden()">Bestellung abschließen</button>
}

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; }

    private Dictionary<string, MenuItemState> menuItemStates = new Dictionary<string, MenuItemState>();
    private int totalQuantity = 0;
    private string totalPrice { get; set; }
    private int? tableID { get; set; }

    protected override void OnInitialized()
    {
        // Zustände aus der Session abrufen
        menuItemStates = sdS.GetMenuItemStates();

        // Setze sicherheitshalber alle nicht vorhandenen Items auf einen Standardzustand
        foreach (var key in menuItemStates.Keys)
        {
            if (!menuItemStates[key].IsSelected)
            {
                menuItemStates[key] = new MenuItemState
                    {
                        Quantity = 0,
                        IsSelected = false,
                        sProdukt = ""
                    };
            }
        }

        UpdateTotalQuantity(); // Gesamtsumme berechnen
        UpdateTotalPrice();
    }

    private void OnQuantityChange(string dbID, string itemId, object value)
    {
        int quantity = int.TryParse(value.ToString(), out var result) ? result : 1;

        // Aktualisiere die Menge im lokalen Zustand
        if (menuItemStates.ContainsKey(itemId))
        {
            menuItemStates[itemId].Quantity = quantity;
            // Speichere die Änderungen in der Session
            sdS.AddOrUpdateMenuItem(dbID, itemId, quantity, menuItemStates[itemId].sProdukt);
        }
        UpdateTotalQuantity(); // Gesamtsumme aktualisieren
        UpdateTotalPrice();
        StateHasChanged();
    }

    private void OnDescriptionChange(string dbID, string itemId, object value)
    {
        sdS.AddOrUpdateMenuItem(dbID, itemId, menuItemStates[itemId].Quantity, value?.ToString()); // Beschreibung aktualisieren
        StateHasChanged();
    }

    private void RemoveFromCart(string itemId)
    {        
        sdS.RemoveItem(itemId);  // Artikel aus der Session entfernen
        menuItemStates = sdS.GetMenuItemStates();      

        UpdateTotalQuantity(); // Gesamtsumme aktualisieren
        UpdateTotalPrice();
        StateHasChanged();
    }

    private void UpdateTotalQuantity()
    {
        totalQuantity = menuItemStates.Values
            .Where(x => x.IsSelected)
            .Sum(item => item.Quantity);
    }

    private void UpdateTotalPrice()
    {
        DBConnector dB = new DBConnector();
        decimal sum = 0;
        foreach (var key in menuItemStates.Keys)
        {
            var reader = dB.getTotalPrice(menuItemStates[key].dbID);


            while (reader.Read())
            {
                object price = reader["Preis"];

                decimal.TryParse(price.ToString(), out var decPrice);
                decPrice = decPrice * menuItemStates[key].Quantity;
                sum += decPrice;
            }
        }
        totalPrice = sum.ToString("F2") + "€";

    }

    private String getPrice (String dbID, int quantity)
    {
        DBConnector dB = new DBConnector();
        decimal price = 0;

        var reader = dB.getTotalPrice(dbID);
        if (reader.Read())
        {
            decimal.TryParse(reader["Preis"].ToString(), out price);
        }
        price *= quantity;
        return price.ToString("F2") + "€";
    }



    private async Task BestellungSenden()
    {
        try
        {
            DBConnector dB = new DBConnector();


            foreach (var key in menuItemStates.Keys)
            {

                dB.SaveData("Orders",
                            ["TableNumber", "Product", "AdditionalInfo", "Amount", "ProductName"],
                            [tableID.ToString(),key, menuItemStates[key].sProdukt, menuItemStates[key].Quantity.ToString(), menuItemStates[key].sProduktName],
                            [2,1,1,2,1]);
            }

            await JSRuntime.InvokeVoidAsync("confirm", "Bestellung abgesendet");
            ClearFields();


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void ClearFields()
    {
        foreach(var key in menuItemStates.Keys)
        {
            sdS.RemoveItem(key);
        }
        StateHasChanged();
    }


    private async void tablenumberValidation(object e)
    {
        int.TryParse(e.ToString(), out var result);
        if (result < 1 || result > 15)
        {
            tableID = default;
        }
        else
        {
            tableID = result;
        }
    }
}
