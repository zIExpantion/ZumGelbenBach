@page "/menu"
@rendermode InteractiveServer
@using ZumGelbenBach;
@using ZumGelbenBach.Components.Models
@inject HttpClient HttpClient


<PageTitle>menu</PageTitle>
<link href="~/app.css" rel="stylesheet" />
<div>
    <h1 style="font-family:'Edwardian Script ITC'; font-size:500%; text-align:center; margin-bottom: 100px;"> The Menu </h1>
</div>


<!--<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>-->
<!--<button class="btn btn-primary" @onclick="GetData">Load Menu</button>-->



@if (menuItems != null && menuItems.Any())
{
    @foreach (var item in menuItems)
    {
        var itemId = item["Bezeichnung"].ToString() + item["Menue_ID"].ToString();
        <div style="display: flex; align-items: center; justify-content: space-between;" id="@itemId" class="menu-item">


            <!--<div id=@item["Bezeichnung"].ToString() class="menu-item">-->

            <div style="float:right;width:100px; height:100px; overflow: hidden; order: 3;">
                <img src=@item["Image"].ToString() alt="Menu Image" width="auto" height="100%" style="object-fit: cover;" />
            </div>

            <div style="margin:0 auto;width:auto; flex-grow: 1; flex-direction: column; order: 2; padding-left: 50px; padding-right: 30px;">
                <div style="margin: 0 auto; width: auto; display: flex; justify-content: space-between; align-items: center;">
                    <h4 style="margin: 0;">@item["Bezeichnung"].ToString()</h4>
                    <p style="text-align: right; margin: 0;"><b>@item["Preis"] €</b></p>
                </div>
                <p style="font-style:italic;">&nbsp;&nbsp;&nbsp;&nbsp; @item["Beschreibung"].ToString()</p>
            </div>

            <div style="order: 1;">
                <input id="quantity_@item["Bezeichnung"].ToString()"
                type="number"
                placeholder="Quantity"
                value="@menuItemStates[itemId].Quantity"
                @oninput="e => OnQuantityChange(itemId, e.Value)"
                style="transform: scale(0.75)" />

                <input id="select_@item["Bezeichnung"].ToString()"
                type="checkbox"
                checked="@menuItemStates[itemId].IsSelected"
                @onchange="e => OnCheckboxChange(itemId, e.Value)"
                style="transform: scale(1.5)" />

            </div>
        </div>
        <br />
        <hr />
    }

    <button class="btn btn-primary" style=" background-color: @(!IsAnyItemSelected() ? "#404040" : "#007bff"); color: white;" @onclick="SubmitOrder" disabled="@(!IsAnyItemSelected())">Zu Bestellung hinzufügen</button>
    <br />
    <br />
    <br />
}
else
{
    <p>No data loaded. Click "Load Menu" to fetch items.</p>
}

@code {

    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private SessionDataService sdS { get; set; }
    private Dictionary<string, MenuItemState> menuItemStates = new Dictionary<string, MenuItemState>();


    private int currentCount = 0;
    private int _quantity { get; set; }
    private bool _isChecked;    
    private bool isDataLoaded = false;

    // Liste der Datenzeilen (jede Zeile ist ein Dictionary)
    private List<Dictionary<string, object>> menuItems = new List<Dictionary<string, object>>();

    /*  private void IncrementCount()
            {
            currentCount++;
        }*/

    protected override async Task OnInitializedAsync()
    {
        
        await GetDataAsync(); // Automatically load menu data on page load
                              //await GetCaloriesAsync(); noch ein fehler findet keine Daten aktuell problem ist der Reader in GetCaloriesAsync
        isDataLoaded = true;
    }

    private async Task GetDataAsync()
    {
        try
        {
            DBConnector dB = new DBConnector();
            var reader = dB.ReadMenuWithImages("Menue", new[] { "Menue_ID", "Bezeichnung", "Beschreibung", "Preis", "Größe", "Images.Photo" }, "Image", "Images", "ImgID");

            menuItems.Clear();

            while (reader.Read())
            {
                string base64Image = string.Empty;
                if (DBConnector.HasColumn(reader, "Photo") && reader["Photo"] != DBNull.Value)
                {
                    var imageBytes = (byte[])reader["Photo"];
                    base64Image = $"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}";
                }

                var row = new Dictionary<string, object>
                {
                    { "Bezeichnung", reader["Bezeichnung"] },
                    { "Beschreibung", reader["Beschreibung"] },                    
                    { "Preis", reader["Preis"] },
                    { "Größe", reader["Größe"] },
                    { "Image", base64Image },
                    {"Menue_ID", reader["Menue_ID"]}
                };
                // if (row.TryGetValue("Preis").ToString().IndexOf("."))

                // Setze Preis auf 2 Nachkommastellen
                if (row.TryGetValue("Preis", out var preisValue))
                {
                    if (decimal.TryParse(preisValue.ToString(), out var preis))
                    {
                        row["Preis"] = preis.ToString("F2");
                    }
                    else
                    {
                        row["Preis"] = "0.00";
                    }
                }
                menuItems.Add(row);

                var itemId = row["Bezeichnung"].ToString() + row["Menue_ID"].ToString();
                menuItemStates[itemId] = new MenuItemState
                    {
                        Quantity = 0,
                        IsSelected = false,
                        dbID = row["Menue_ID"].ToString(),
                        sProduktName = row["Bezeichnung"].ToString()
                    };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }



    private bool IsAnyItemSelected()
    {
        return menuItemStates.Values.Any(state => state.IsSelected && state.Quantity > 0);
    }


    private async Task SubmitOrder()
    {
        // Holen Sie sich alle ausgewählten und nicht-leeren Menüitems
        var selectedItems = menuItemStates
            .Where(x => x.Value.IsSelected && x.Value.Quantity > 0)
            .Select(x => new { ItemName = x.Key, Quantity = x.Value.Quantity, dbID = x.Value.dbID, sProduktName = x.Value.sProduktName })
            .ToList();

        // Füge alle ausgewählten Artikel zur Session hinzu
        foreach (var selectedItem in selectedItems)
        {
            // Hier fügen wir die ausgewählten Artikel in die Session ein (SessionDataService)
            AddItemToSession(selectedItem.dbID, selectedItem.ItemName, selectedItem.Quantity, selectedItem.ItemName, selectedItem.sProduktName);

            Console.WriteLine($"Item: {selectedItem.ItemName}, Quantity: {selectedItem.Quantity}");
        }

        // Zurücksetzen der Zustände in menuItemStates, damit die UI aktualisiert wird
        foreach (var key in menuItemStates.Keys.ToList())
        {
            menuItemStates[key].Quantity = 0;
            menuItemStates[key].IsSelected = false;
        }

        // Hier synchronisieren wir die bestellten Artikel mit dem SessionDataService
        // Dies speichert die ausgewählten Artikel in der Session
        var menuItemStatesForSession = selectedItems.ToDictionary(
            x => x.ItemName,
            x => new MenuItemState { Quantity = x.Quantity, IsSelected = true, dbID = x.dbID, sProduktName = x.sProduktName }
        );

        sdS.UpdateMenuItemStates(menuItemStatesForSession);
        await JSRuntime.InvokeVoidAsync("confirm", "Bestellung ergänzt");
    }



    private void AddItemToSession(String dbID, String id, int amount, String text, string sProductName)
    {
        // Beispiel: Füge ein neues Item mit einer eindeutigen ID zur Session hinzu
        string newItemId = "New Item " + (menuItemStates.Count + 1);  // oder eine andere Logik für eine ID

        //sdS.AddOrUpdateMenuItem(newItemId, 1, "Neues Produkt");

        sdS.AddOrUpdateMenuItem(dbID, id, amount, text, sProductName);
    }

    private void ClearItems()
    {
        sdS.ClearItems();
    }


    private void OnCheckboxChange(string itemId, object value)
    {
        // Parse den neuen Wert als bool
        bool isChecked = value is bool boolean && boolean;

        // Update den Zustand
        menuItemStates[itemId].IsSelected = isChecked;

        //cb true Quantity auf 1 setzen
        if (isChecked && menuItemStates[itemId].Quantity == 0)
        {
            menuItemStates[itemId].Quantity = 1;
        }
        //wenn cb unchecked quantity = 0
        else if (!isChecked)
        {
            menuItemStates[itemId].Quantity = 0;
        }

        StateHasChanged(); 
    }



    /// <summary>
    ///     Aktualisiert die UI
    /// </summary>
    /// <param name="itemId"></param>
    /// <param name="value"></param>
    private void OnQuantityChange(string itemId, object value)
    {
        //Zahlenwert speichern 
        int quantity = int.TryParse(value.ToString(), out var result) ? result : 0;

        // Update vom Zustand
        menuItemStates[itemId].Quantity = quantity;

        //cb setzten wenn qualtity > 0 
        menuItemStates[itemId].IsSelected = quantity > 0;

        // Entferne Artikel aus der Session, wenn Menge = 0
        if (quantity == 0)
        {
            sdS.RemoveItem(itemId);
        }

        StateHasChanged(); 
    }


    /// <summary>
    ///     
    /// </summary>
    /// <returns></returns>
    public async Task GetCaloriesAsync()
    {
        DBConnector db = new DBConnector();
        string sqlQuery = "SELECT Menue_ID,Bezeichnung, kcal FROM Menue WHERE inaktiv = 0";
        string bezeichnung;
        object kcalValue;
        int id;

        var reader = db.ExecuteCommand(sqlQuery);

        // Iteriere durch die Daten
        while (reader.Read())
        {
            bezeichnung = reader["Bezeichnung"].ToString();
            id = Convert.ToInt32(reader["Menue_ID"]);
            kcalValue = reader["kcal"];

            // Prüfe, ob der Wert für kcal leer ist
            if (kcalValue == DBNull.Value || string.IsNullOrWhiteSpace(kcalValue.ToString()))
            {
                if (!string.IsNullOrWhiteSpace(bezeichnung))
                {
                    await CallAPI(bezeichnung,id);                    
                }
                else
                {
                    Console.WriteLine("Bezeichnung fehlt, API-Aufruf übersprungen.");
                }
            }
            else
            {
                Console.WriteLine($"Das Menüelement '{bezeichnung}' hat {kcalValue} kcal.");
            }
        }
    }

    /// <summary>
    /// Ruft die Nutritionix-API auf, um Kalorieninformationen für ein Lebensmittel zu erhalten.
    /// </summary>
    /// <param name="foodName">Der Name des Lebensmittels, für das Kalorieninformationen benötigt werden.</param>
    /// <returns>Eine Nachricht mit den Kalorieninformationen oder einem Fehler.</returns>
    private async Task CallAPI(string foodName,int id)
    {
        try
        {
            var apiUrl = "https://trackapi.nutritionix.com/v2/natural/nutrients";
            var requestBody = new { query = foodName };
            string sqlCmd;
            DBConnector dB = new DBConnector();

            // API-Schlüssel und ID einfügen
            HttpClient.DefaultRequestHeaders.Clear();
            HttpClient.DefaultRequestHeaders.Add("x-app-id", "dd00912d");
            HttpClient.DefaultRequestHeaders.Add("x-app-key", "0d5bcef6c4bba8ca8816901cb5cfa548");

            var response = await HttpClient.PostAsJsonAsync(apiUrl, requestBody);

            if (response.IsSuccessStatusCode)
            {
                var nutritionData = await response.Content.ReadFromJsonAsync<NutritionResponse>();
                if (nutritionData != null && nutritionData.Foods.Any())
                {
                    var food = nutritionData.Foods.First();
                    sqlCmd = $"Update Menue Set kcal = {food.NfCalories} WHERE Bezeichnung = {foodName} AND Menue_id = {id}";
                    dB.ExecuteCommand(sqlCmd);
                }
                else
                    Console.WriteLine("Keine Daten gefunden");                
            }
            else
            {
                Console.WriteLine( $"Fehler: {response.StatusCode}. Bitte prüfen Sie Ihre Eingabe.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Fehler beim API-Aufruf: {e.Message}");            
        }
    }
}
