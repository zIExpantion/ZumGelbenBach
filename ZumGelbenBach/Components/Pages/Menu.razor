@page "/menu"
@rendermode InteractiveServer
@using ZumGelbenBach;
@using ZumGelbenBach.Components.Models

<PageTitle>menu</PageTitle>
<link href="~/app.css" rel="stylesheet" />


<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="GetData">Load Menu</button>



@if (menuItems != null && menuItems.Any())
{
    @foreach (var item in menuItems)
    {
        var itemId = item["Bezeichnung"].ToString() + item["Menue_ID"].ToString();
        <div id="@itemId" class="menu-item">


            <!--<div id=@item["Bezeichnung"].ToString() class="menu-item">-->

            <div style="float:right;width:100px;">
                <img src=@item["Image"].ToString() alt="Menu Image" width="100%" height="100%" /> 
            </div>

            <div style="margin:0 auto;width:300px;">
                <h4>@item["Bezeichnung"].ToString()</h4>
                <p style="font-style:italic;">&nbsp;&nbsp;&nbsp;&nbsp; @item["Beschreibung"].ToString()</p>
            </div>

            <div>
                <input id="quantity_@item["Bezeichnung"].ToString()" type="number" placeholder="Quantity" @bind="menuItemStates[itemId].Quantity" style="transform: scale(0.75)" /> <!-- Bitte noch machen: Wenn value gesetzt hier, dann checkbox füllen.-->
                <input id="select_@item["Bezeichnung"].ToString()" type="checkbox" @bind="menuItemStates[itemId].IsSelected" style="transform: scale(1.5)" /> <!-- Wenn checkbox aktiviert wird, dann Oben value auf 1 setzen. Wenn deaktiviert wird, dann oben value löschen-->
            </div>
        </div>
        <br />
    }

    <button class="btn btn-primary" style=" background-color: @(!IsAnyItemSelected() ? "#404040" : "#007bff"); color: white;" @onclick="SubmitOrder" disabled="@(!IsAnyItemSelected())">Zu Bestellung hinzufügen</button>

}
else
{
    <p>No data loaded. Click "Load Menu" to fetch items.</p>
}

@code {

    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private SessionDataService sdS { get; set; }
    private Dictionary<string, MenuItemState> menuItemStates = new Dictionary<string, MenuItemState>();


    private int currentCount = 0;
    private int _quantity { get; set; }
    private bool _isChecked;


    // Liste der Datenzeilen (jede Zeile ist ein Dictionary)
    private List<Dictionary<string, object>> menuItems = new List<Dictionary<string, object>>();

    private void IncrementCount()
    {
        currentCount++;
    }

    private void GetData()
    {
        try
        {
            // DBConnector initialisieren
            DBConnector dB = new DBConnector();

            var reader = dB.ReadMenuWithImages("Menue", new[] { "Menue_ID", "Bezeichnung", "Beschreibung", "Preis", "Größe", "Images.Photo" }, "Image", "Images", "ImgID");

            menuItems.Clear(); 

            while (reader.Read())
            {

                string base64Image = string.Empty;
                if (DBConnector.HasColumn(reader, "Photo") && reader["Photo"] != DBNull.Value)
                {
                    var imageBytes = (byte[])reader["Photo"];
                    base64Image = $"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}";
                }

                var row = new Dictionary<string, object>
                {
                    { "Bezeichnung", reader["Bezeichnung"] },
                    { "Beschreibung", reader["Beschreibung"] },
                    { "Preis", reader["Preis"] },
                    { "Größe", reader["Größe"] }, 
                    { "Image", base64Image },
                    {"Menue_ID", reader["Menue_ID"]}
                };

                menuItems.Add(row);
                
                var itemId = row["Bezeichnung"].ToString() + row["Menue_ID"].ToString();
                menuItemStates[itemId] = new MenuItemState
                    {
                        Quantity = 0,
                        IsSelected = false 
                    };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private bool IsAnyItemSelected()
    {
        return menuItemStates.Values.Any(state => state.IsSelected && state.Quantity > 0);
    }


    private async  Task SubmitOrder()
    {
        var selectedItems = menuItemStates
           .Where(x => x.Value.IsSelected && x.Value.Quantity > 0)
           .Select(x => new { ItemName = x.Key, Quantity = x.Value.Quantity })
           .ToList();

        foreach (var selectedItem in selectedItems)
        {
            Console.WriteLine($"Item: {selectedItem.ItemName}, Quantity: {selectedItem.Quantity}");
        }

        foreach (var key in menuItemStates.Keys.ToList())
        {
            menuItemStates[key].Quantity = 0;
            menuItemStates[key].IsSelected = false;
        }

        await JSRuntime.InvokeVoidAsync("confirm", "Bestellung ergänzt");

    }


    private void AddItemToSession()
    {
        sdS.AddItem("New Item " + (sdS.Items.Count + 1));
    }

    private void ClearItems()
    {
        sdS.ClearItems();
    }
}
