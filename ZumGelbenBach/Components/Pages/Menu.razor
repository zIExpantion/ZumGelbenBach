@page "/menu"
@rendermode InteractiveServer
@using ZumGelbenBach;
@using ZumGelbenBach.Components.Models
@using System.Text.Json;
@inject HttpClient HttpClient


<PageTitle>menu</PageTitle>
<link href="~/app.css" rel="stylesheet" />

<style>
    .headline{
    font-family: 'Edwardian Script ITC';
    font-size: 500%;
    text-align: center;
    margin-bottom: 100px;
    }

    .divright {
    float: right;
    width: 100px;
    height: 100px;
    overflow: hidden;
    order: 3;
    }

    .divleft {
    order: 1;
    }

    .divmid {
    margin: 0 auto;
    width: auto;
    flex-grow: 1;
    flex-direction: column;
    order: 2;
    padding-left: 50px;
    padding-right: 30px;
    }

    .divinner {
    margin: 0 auto;
    width: auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    }

    .divbox {
    display: flex;
    align-items: center;
    justify-content: space-between;
    }

    .btnAdd {
    background-color: @(!IsAnyItemSelected() ? "#404040" : "#007bff");
    color: white;
    }

</style>

<div>
    <h1 class="headline"> The Menu </h1>
</div>


@if (menuItems != null && menuItems.Any())
{
    @foreach (var item in menuItems)
    {
        var itemId = item["Bezeichnung"].ToString() + item["Menue_ID"].ToString();
        <div id="@itemId" class="menu-item divbox">

            <div class="divright">
                <img src=@item["Image"].ToString() alt="Menu Image" width="auto" height="100%" style="object-fit: cover;" />
            </div>

            <div class="divmid">
                <div class="divinner">
                    <h4 style="margin: 0;">@item["Bezeichnung"].ToString()</h4>
                    <p style="text-align: right; margin: 0;"><b>@item["Preis"] €</b></p>
                </div>
                <div class="divinner">
                    <p style="font-style:italic;">&nbsp;&nbsp;&nbsp;&nbsp; @item["Beschreibung"].ToString()</p>
                    @if(!(@item["kcal"].ToString() == "0"))
                    {
                        <p style="text-align: right; vertical-align:top; font-size: small;">@item["kcal"] kalc</p>
                    }
                </div>
                
            </div>

            <div class="divleft">
                <input id="quantity_@item["Bezeichnung"].ToString()"
                type="number"
                placeholder="Quantity"
                value="@menuItemStates[itemId].Quantity"
                @oninput="e => OnQuantityChange(itemId, e.Value)"
                style="transform: scale(0.75)" />

                <input id="select_@item["Bezeichnung"].ToString()"
                type="checkbox"
                checked="@menuItemStates[itemId].IsSelected"
                @onchange="e => OnCheckboxChange(itemId, e.Value)"
                style="transform: scale(1.5)" />

            </div>
        </div>
        <br />
        <hr />
    }

    <button class="btn btn-primary btnAdd" @onclick="SubmitOrder" disabled="@(!IsAnyItemSelected())">Zu Bestellung hinzufügen</button>
    <br />
    <br />
    <br />
}
else
{
    <p>No data loaded. Click "Load Menu" to fetch items.</p>
}

@code {

    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private SessionDataService sdS { get; set; }
    private Dictionary<string, MenuItemState> menuItemStates = new Dictionary<string, MenuItemState>();
    private DBConnector db = new DBConnector();

    private int currentCount = 0;
    private int _quantity { get; set; }
    private bool _isChecked;    
    private bool isDataLoaded = false;

    // Liste der Datenzeilen (jede Zeile ist ein Dictionary)
    private List<Dictionary<string, object>> menuItems = new List<Dictionary<string, object>>();

    protected override async Task OnInitializedAsync()
    {
        await GetDataAsync(); 
        await GetCaloriesAsync();
        isDataLoaded = true;
    }

    private async Task GetDataAsync()
    {
        try
        {
            var reader = db.ReadMenuWithImages("Menue", new[] { "Menue_ID", "Bezeichnung", "Beschreibung", "Preis", "Größe", "Images.Photo", "kcal" }, "Image", "Images", "ImgID");
            menuItems.Clear();

            while (reader.Read())
            {
                string base64Image = string.Empty;
                if (DBConnector.HasColumn(reader, "Photo") && reader["Photo"] != DBNull.Value)
                {
                    var imageBytes = (byte[])reader["Photo"];
                    base64Image = $"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}";
                }

                var row = new Dictionary<string, object>
                {
                    { "Bezeichnung", reader["Bezeichnung"] },
                    { "Beschreibung", reader["Beschreibung"] },                    
                    { "Preis", reader["Preis"] },
                    { "Größe", reader["Größe"] },
                    { "Image", base64Image },
                    {"Menue_ID", reader["Menue_ID"]},
                    {"kcal", reader["kcal"]}
                };

                // Setze Preis auf 2 Nachkommastellen
                if (row.TryGetValue("Preis", out var preisValue)) {
                    if (decimal.TryParse(preisValue.ToString(), out var preis)) {
                        row["Preis"] = preis.ToString("F2");
                    }
                    else {
                        row["Preis"] = "0.00";
                    }
                }
                menuItems.Add(row);

                var itemId = row["Bezeichnung"].ToString() + row["Menue_ID"].ToString();
                menuItemStates[itemId] = new MenuItemState {
                    Quantity = 0,
                    IsSelected = false,
                    dbID = row["Menue_ID"].ToString(),
                    sProduktName = row["Bezeichnung"].ToString()
                };
            }
        }
        catch (Exception ex) {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }



    private bool IsAnyItemSelected()
    {
        return menuItemStates.Values.Any(state => state.IsSelected && state.Quantity > 0);
    }


    private async Task SubmitOrder()
    {
        // Holen Sie sich alle ausgewählten und nicht-leeren Menüitems
        var selectedItems = menuItemStates
            .Where(x => x.Value.IsSelected && x.Value.Quantity > 0)
            .Select(x => new { ItemName = x.Key, Quantity = x.Value.Quantity, dbID = x.Value.dbID, sProduktName = x.Value.sProduktName })
            .ToList();

        // Füge alle ausgewählten Artikel zur Session hinzu
        foreach (var selectedItem in selectedItems)
        {
            // Hier fügen wir die ausgewählten Artikel in die Session ein (SessionDataService)
            AddItemToSession(selectedItem.dbID, selectedItem.ItemName, selectedItem.Quantity, selectedItem.ItemName, selectedItem.sProduktName);

            Console.WriteLine($"Item: {selectedItem.ItemName}, Quantity: {selectedItem.Quantity}");
        }

        // Zurücksetzen der Zustände in menuItemStates, damit die UI aktualisiert wird
        foreach (var key in menuItemStates.Keys.ToList())
        {
            menuItemStates[key].Quantity = 0;
            menuItemStates[key].IsSelected = false;
        }

        // Hier synchronisieren wir die bestellten Artikel mit dem SessionDataService
        // Dies speichert die ausgewählten Artikel in der Session
        var menuItemStatesForSession = selectedItems.ToDictionary(
            x => x.ItemName,
            x => new MenuItemState { Quantity = x.Quantity, IsSelected = true, dbID = x.dbID, sProduktName = x.sProduktName }
        );

        sdS.UpdateMenuItemStates(menuItemStatesForSession);
        await JSRuntime.InvokeVoidAsync("confirm", "Bestellung ergänzt");
    }



    private void AddItemToSession(String dbID, String id, int amount, String text, string sProductName)
    {
        // Beispiel: Füge ein neues Item mit einer eindeutigen ID zur Session hinzu
        string newItemId = "New Item " + (menuItemStates.Count + 1);
        sdS.AddOrUpdateMenuItem(dbID, id, amount, text, sProductName);
    }

    private void ClearItems()
    {
        sdS.ClearItems();
    }


    private void OnCheckboxChange(string itemId, object value)
    {
        // Parse den neuen Wert als bool
        bool isChecked = value is bool boolean && boolean;

        // Update den Zustand
        menuItemStates[itemId].IsSelected = isChecked;

        //cb true Quantity auf 1 setzen
        if (isChecked && menuItemStates[itemId].Quantity == 0)
        {
            menuItemStates[itemId].Quantity = 1;
        }
        //wenn cb unchecked quantity = 0
        else if (!isChecked)
        {
            menuItemStates[itemId].Quantity = 0;
        }

        StateHasChanged(); 
    }



    /// <summary>
    ///     Aktualisiert die UI
    /// </summary>
    /// <param name="itemId"></param>
    /// <param name="value"></param>
    private void OnQuantityChange(string itemId, object value)
    {
        int quantity = int.TryParse(value.ToString(), out var result) ? result : 0;

        // Update vom Zustand
        menuItemStates[itemId].Quantity = quantity;
        menuItemStates[itemId].IsSelected = quantity > 0;

        if (quantity == 0)
        { sdS.RemoveItem(itemId); }

        StateHasChanged(); 
    }


    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public async Task GetCaloriesAsync()
    {
        try
        {
            string sqlQuery = "SELECT Menue_ID, Bezeichnung, kcal FROM Menue WHERE inaktiv = 0";

            // Verwende await, um auf das Task-Ergebnis zuzugreifen
            using (var reader = await db.ExecuteCommandAsync(sqlQuery))
            {
                //Schleife produkte laden und wenn keine kcal vorhanden sind, dann api aufrufen
                while (reader != null && reader.Read())
                {
                    string bezeichnung = reader["Bezeichnung"]?.ToString() ?? string.Empty;
                    int id = reader["Menue_ID"] != DBNull.Value ? Convert.ToInt32(reader["Menue_ID"]) : 0;
                    object kcalValue = reader["kcal"];

                    if (kcalValue == DBNull.Value || string.IsNullOrWhiteSpace(kcalValue.ToString()))// || kcalValue.ToString() == "0") wenn 0 keine daten gefunden
                    {
                        await CallAPI(bezeichnung, id);
                    }
                    else
                    {
                        Console.WriteLine($"Item: {bezeichnung}, kcal: {kcalValue}");
                    }
                }
            }
        }
        catch (Exception e) {
            Console.WriteLine("Fehlermeldung: " + e.Message);
        }
    }


    /// <summary>
    /// Ruft die Nutritionix-API auf, um Kalorieninformationen für ein Lebensmittel zu erhalten.
    /// https://trackapi.nutritionix.com/v2/search/item?upc=49000000450&x-app-id=dd00912d&x-app-key=0d5bcef6c4bba8ca8816901cb5cfa548
    /// query also die suche nach einem gericht nach namen wird von der api abgelehnt
    /// https://trackapi.nutritionix.com/v2/search/item?query=apple&x-app-id=dd00912d&x-app-key=0d5bcef6c4bba8ca8816901cb5cfa548
    /// </summary>
    /// <param name="foodName">Der Name des Lebensmittels, für das Kalorieninformationen benötigt werden.</param>
    /// <returns>Eine Nachricht mit den Kalorieninformationen oder einem Fehler.</returns>
    public async Task CallAPI(string foodName,int id)
    {
        try
        {
            // Verwende den übergebenen foodName, falls nötig
            var apiUrl = $"https://trackapi.nutritionix.com/v2/search/instant?query={Uri.EscapeDataString(foodName)}";

            //Console.WriteLine($"API URL: {apiUrl}");  // Überprüfen, ob die URL richtig ist

            // HttpClient einrichten und Header setzen
            using (var httpClient = new HttpClient())
            {
                // API-Keys
                httpClient.DefaultRequestHeaders.Clear();
                httpClient.DefaultRequestHeaders.Add("x-app-id", "dd00912d");  // Deine App ID
                httpClient.DefaultRequestHeaders.Add("x-app-key", "0d5bcef6c4bba8ca8816901cb5cfa548");  // Dein App Key

                // GET-Anfrage senden
                var response = await httpClient.GetAsync(apiUrl);

                

                if (response.IsSuccessStatusCode)
                {
                    // Antwort als String lesen
                    var responseBody = await response.Content.ReadAsStringAsync();
                   Console.WriteLine("API Response: " + responseBody); // Antwort protokollieren

                    var nutritionData = await response.Content.ReadFromJsonAsync<NutritionResponse>();


                    // Antwort des APIs in ein benutzerdefiniertes Modell deserialisieren
                    //var nutritionData = JsonSerializer.Deserialize<NutritionResponse>(responseBody);

                    //var foods = nutritionData?.Common ?? new List<NutritionResponse.FoodItem>();
                    var brandedFoods = nutritionData?.Branded ?? new List<BrandedFood>();


                    if (brandedFoods != null && brandedFoods.Count > 0)
                    {
                        // Filtern der Lebensmittel mit "nf_calories"
                        var brandedFoodsWithCalories = brandedFoods
                        .Where(food => food.NfCalories.HasValue && food.NfCalories.Value > 0);

                        if (brandedFoodsWithCalories.Any())
                        {
                            // Durchschnitt der Kalorien berechnen
                            double averageCalories = Math.Round(brandedFoodsWithCalories
                                                        .Average(food => food.NfCalories.Value));  // Entpacke den Nullable-Wert mit .Value

                            
                            // SQL-Update durchführen, um den Durchschnitt in die Tabelle zu setzen
                            string sqlCmd = $"UPDATE Menue SET kcal = {averageCalories} WHERE Bezeichnung = '{foodName}'and Menue_ID = {id}";
                            await db.ExecuteCommandAsync(sqlCmd);

                            Console.WriteLine("SQL query successfully executed with average calorie data.");
                        }
                        else
                        {
                            Console.WriteLine("No branded food data with valid calories found.");
                        }
                    }
                    else
                    {
                        Console.WriteLine("No food data found.");
                    }
                }
                else
                {
                    // Fehler bei der API-Anfrage
                    string responseContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API request failed: {response.StatusCode}, Content: {responseContent}");
                }
            }
        }
        catch (Exception e)
        {
            // Fehlerbehandlung
            Console.WriteLine($"Error during API call: {e.Message}");
        }
    }

}
